package route_segments

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/workouts"
)

templ RouteSegmentMap(s *database.RouteSegment) {
	{{ pu := helpers.CurrentUser(ctx).PreferredUnits() }}
		<link rel="stylesheet" type="text/css" href={ helpers.RouteFor(ctx, "assets") + "/components/map.css" } />
		<script src={ helpers.RouteFor(ctx, "assets") + "/components/map.js" }></script>
		{{
	mapConfig := struct {
		CenterLat     float64
		CenterLng     float64
		MinElevation  float64
		MaxElevation  float64
		SpeedName     string
		ElevationName string
		StreetsName   string
		AerialName    string
	}{
		CenterLat:     s.Center.Lat,
		CenterLng:     s.Center.Lng,
		MinElevation:  s.MinElevation,
		MaxElevation:  s.MaxElevation,
		SpeedName:     i18n.T(ctx, "translation.Average_speed"),
		ElevationName: i18n.T(ctx, "translation.Elevation"),
		StreetsName:   i18n.T(ctx, "translation.Streets"),
		AerialName:    i18n.T(ctx, "translation.Aerial"),
	}
		}}
		@templ.JSONScript("map-config", mapConfig)
		{{
	type point struct {
		Lat       float64 `json:"lat"`
		Lng       float64 `json:"lng"`
		Speed     float64 `json:"speed"`
		Elevation float64 `json:"elevation"`
		Title     string  `json:"title"`
	}
	points := []point{}

	for _, p := range s.Points {
		points = append(points, point{
			Lat:       p.Lat,
			Lng:       p.Lng,
			Speed:     p.AverageSpeed(),
			Elevation: p.ExtraMetrics.Get("elevation"),
			Title:     workouts.PointTitle(ctx, pu, &p),
		})
	}
		}}
	<wt-map
		id="map"
		class="border-2 border-black rounded-xl h-[300px] sm:h-[400px] md:h-[600px] print:w-full print:h-[600px]"
		map-config={ templ.JSONString(mapConfig) }
		map-points={ templ.JSONString(points) }
	></wt-map>
}
