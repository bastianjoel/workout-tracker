package route_segments

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ Show(s *database.RouteSegment) {
	@partials.Page(partials.NewPageOptions().WithMaps()) {
		{{ preferredUnits := helpers.CurrentUser(ctx).PreferredUnits() }}
		<div class="gap-4">
			<span class="float-right actions">
				if s.Dirty {
					<span class="dirty">
						@helpers.IconFor("refresh")
						{ i18n.T(ctx, "translation.refresh_in_progress") }
					</span>
				}
				@actions(s)
			</span>
			<h2>
				@helpers.IconFor("route-segment")
				@Name(s, 0)
			</h2>
			<div class="lg:flex lg:flex-wrap print:block">
				<div class="basis-1/2 2xl:basis-1/3 pagebreak">
					<div class="inner-form">
						@RouteSegmentMap(s)
					</div>
				</div>
				<div class="basis-1/2 2xl:basis-1/3">
					<div class="inner-form">
						@details(s)
					</div>
				</div>
				<div class="basis-1/2 2xl:basis-1/3">
					<div class="inner-form">
						<table>
							<thead>
								<tr>
									<th>{ i18n.T(ctx, "translation.User") }</th>
									<th>{ i18n.T(ctx, "translation.Workout") }</th>
									<th>{ i18n.T(ctx, "translation.Distance") }</th>
									<th>{ i18n.T(ctx, "translation.Duration") }</th>
									<th>{ i18n.T(ctx, "translation.Tempo") }</th>
								</tr>
							</thead>
							<tbody>
								for _, m := range s.RouteSegmentMatches {
									<tr>
										<td>
											<a href={ templ.SafeURL(helpers.RouteFor(ctx, "user-show", m.Workout.UserID)) }>
												{ m.Workout.User.Name }
											</a>
										</td>
										<td>
											<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-show", m.WorkoutID)) }>
												{ m.Workout.Name }
											</a>
										</td>
										<td class="whitespace-nowrap font-mono">
											{ helpers.HumanDistance(ctx, m.Distance) } { preferredUnits.Distance() }
										</td>
										<td class="whitespace-nowrap font-mono">
											{ helpers.HumanDuration(m.Duration) }
										</td>
										<td class="whitespace-nowrap font-mono">
											{ helpers.HumanTempo(ctx, m.AverageSpeed()) } { preferredUnits.Tempo() }
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="pagebreak">
				if len(s.Notes) > 0 {
					<div class="inner-form">
						<h3>
							@helpers.IconFor("note")
							{ i18n.T(ctx, "translation.Notes") }
						</h3>
						<div>
							@templ.Raw(helpers.MarkdownToHTML(s.Notes))
						</div>
					</div>
				}
			</div>
		</div>
	}
}
